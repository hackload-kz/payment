using AutoMapper;
using PaymentGateway.Core.DTOs.Common;
using PaymentGateway.Core.DTOs.PaymentInit;
using PaymentGateway.Core.DTOs.PaymentConfirm;
using PaymentGateway.Core.DTOs.PaymentCancel;
using PaymentGateway.Core.DTOs.PaymentCheck;
using PaymentGateway.Core.Entities;

namespace PaymentGateway.Core.DTOs.Mapping;

/// <summary>
/// AutoMapper profile for payment-related DTOs
/// </summary>
public class PaymentMappingProfile : Profile
{
    public PaymentMappingProfile()
    {
        ConfigurePaymentInitMappings();
        ConfigurePaymentConfirmMappings();
        ConfigurePaymentCancelMappings();
        ConfigurePaymentCheckMappings();
        ConfigureCommonMappings();
    }

    private void ConfigurePaymentInitMappings()
    {
        // PaymentInitRequestDto -> Payment
        CreateMap<PaymentInitRequestDto, Payment>()
            .ForMember(dest => dest.PaymentId, opt => opt.Ignore()) // Generated by system
            .ForMember(dest => dest.TeamSlug, opt => opt.MapFrom(src => src.TeamSlug))
            .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => src.Currency))
            .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.Description))
            .ForMember(dest => dest.CustomerEmail, opt => opt.MapFrom(src => src.Email))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => PaymentStatus.INIT))
            .ForMember(dest => dest.PaymentMethod, opt => opt.MapFrom(src => PaymentMethod.Card))
            .ForMember(dest => dest.ExpiresAt, opt => opt.MapFrom(src => DateTime.UtcNow.AddMinutes(src.PaymentExpiry)))
            .ForMember(dest => dest.Metadata, opt => opt.MapFrom(src => src.Data ?? new Dictionary<string, string>()))
            .ForMember(dest => dest.InitializedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.CreatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.UpdatedAt, opt => opt.Ignore())
            .ForMember(dest => dest.IsDeleted, opt => opt.Ignore())
            .ForMember(dest => dest.Team, opt => opt.Ignore())
            .ForMember(dest => dest.Customer, opt => opt.Ignore())
            .ForMember(dest => dest.Transactions, opt => opt.Ignore())
            .ForMember(dest => dest.PaymentMethods, opt => opt.Ignore());

        // Payment -> PaymentInitResponseDto
        CreateMap<Payment, PaymentInitResponseDto>()
            .ForMember(dest => dest.PaymentId, opt => opt.MapFrom(src => src.PaymentId))
            .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => src.Currency))
            .ForMember(dest => dest.PaymentURL, opt => opt.MapFrom(src => src.PaymentURL))
            .ForMember(dest => dest.ExpiresAt, opt => opt.MapFrom(src => src.ExpiresAt))
            .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.InitializedAt))
            .ForMember(dest => dest.Success, opt => opt.MapFrom(src => true))
            .ForMember(dest => dest.ErrorCode, opt => opt.Ignore())
            .ForMember(dest => dest.Message, opt => opt.MapFrom(src => "Payment initialized successfully"))
            .ForMember(dest => dest.Timestamp, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.Version, opt => opt.MapFrom(src => "1.0"));

        // Customer -> CustomerInfoDto
        CreateMap<Customer, CustomerInfoDto>()
            .ForMember(dest => dest.CustomerKey, opt => opt.MapFrom(src => src.CustomerId.ToString()))
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
            .ForMember(dest => dest.Phone, opt => opt.MapFrom(src => src.Phone))
            .ForMember(dest => dest.IpAddress, opt => opt.Ignore())
            .ForMember(dest => dest.UserAgent, opt => opt.Ignore());

        // OrderItemDto mappings (bidirectional)
        CreateMap<OrderItemDto, Dictionary<string, object>>()
            .ConvertUsing<OrderItemDictionaryConverter>();

        CreateMap<Dictionary<string, object>, OrderItemDto>()
            .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.GetValueOrDefault("name", "").ToString()))
            .ForMember(dest => dest.Quantity, opt => opt.MapFrom(src => Convert.ToDecimal(src.GetValueOrDefault("quantity", 0))))
            .ForMember(dest => dest.Price, opt => opt.MapFrom(src => Convert.ToDecimal(src.GetValueOrDefault("price", 0))))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => Convert.ToDecimal(src.GetValueOrDefault("amount", 0))))
            .ForMember(dest => dest.Tax, opt => opt.MapFrom(src => src.GetValueOrDefault("tax", "").ToString()))
            .ForMember(dest => dest.Category, opt => opt.MapFrom(src => src.GetValueOrDefault("category", "").ToString()));
    }

    private void ConfigurePaymentConfirmMappings()
    {
        // PaymentConfirmRequestDto -> Transaction
        CreateMap<PaymentConfirmRequestDto, Transaction>()
            .ForMember(dest => dest.Type, opt => opt.MapFrom(src => TransactionType.CAPTURE))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => TransactionStatus.PENDING))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount ?? 0))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => "RUB"))
            .ForMember(dest => dest.ProcessingStartedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.AttemptNumber, opt => opt.MapFrom(src => 1))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.TransactionId, opt => opt.Ignore()) // Generated by system
            .ForMember(dest => dest.PaymentId, opt => opt.Ignore()) // Set from context
            .ForMember(dest => dest.Payment, opt => opt.Ignore());

        // Payment -> PaymentConfirmResponseDto
        CreateMap<Payment, PaymentConfirmResponseDto>()
            .ForMember(dest => dest.PaymentId, opt => opt.MapFrom(src => src.PaymentId))
            .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => src.Currency))
            .ForMember(dest => dest.ConfirmedAt, opt => opt.MapFrom(src => src.ConfirmedAt))
            .ForMember(dest => dest.Success, opt => opt.MapFrom(src => true))
            .ForMember(dest => dest.Message, opt => opt.MapFrom(src => "Payment confirmed successfully"))
            .ForMember(dest => dest.Timestamp, opt => opt.MapFrom(src => DateTime.UtcNow));
    }

    private void ConfigurePaymentCancelMappings()
    {
        // PaymentCancelRequestDto -> Transaction (for refund/reversal)
        CreateMap<PaymentCancelRequestDto, Transaction>()
            .ForMember(dest => dest.Type, opt => opt.MapFrom(src => TransactionType.REFUND))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => TransactionStatus.PENDING))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount ?? 0))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => "RUB"))
            .ForMember(dest => dest.FailureReason, opt => opt.MapFrom(src => src.Reason))
            .ForMember(dest => dest.ProcessingStartedAt, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.Id, opt => opt.Ignore())
            .ForMember(dest => dest.TransactionId, opt => opt.Ignore())
            .ForMember(dest => dest.PaymentId, opt => opt.Ignore())
            .ForMember(dest => dest.Payment, opt => opt.Ignore());

        // Payment -> PaymentCancelResponseDto
        CreateMap<Payment, PaymentCancelResponseDto>()
            .ForMember(dest => dest.PaymentId, opt => opt.MapFrom(src => src.PaymentId))
            .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
            .ForMember(dest => dest.OriginalAmount, opt => opt.MapFrom(src => src.Amount))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => src.Currency))
            .ForMember(dest => dest.CancelledAt, opt => opt.MapFrom(src => src.CancelledAt ?? src.ReversedAt ?? src.RefundedAt))
            .ForMember(dest => dest.Success, opt => opt.MapFrom(src => true))
            .ForMember(dest => dest.Message, opt => opt.MapFrom(src => "Payment cancelled successfully"))
            .ForMember(dest => dest.Timestamp, opt => opt.MapFrom(src => DateTime.UtcNow));
    }

    private void ConfigurePaymentCheckMappings()
    {
        // Payment -> PaymentStatusDto
        CreateMap<Payment, PaymentStatusDto>()
            .ForMember(dest => dest.PaymentId, opt => opt.MapFrom(src => src.PaymentId))
            .ForMember(dest => dest.OrderId, opt => opt.MapFrom(src => src.OrderId))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
            .ForMember(dest => dest.StatusDescription, opt => opt.MapFrom(src => GetStatusDescription(src.Status)))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
            .ForMember(dest => dest.Currency, opt => opt.MapFrom(src => src.Currency))
            .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.InitializedAt ?? src.CreatedAt))
            .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.UpdatedAt))
            .ForMember(dest => dest.ExpiresAt, opt => opt.MapFrom(src => src.ExpiresAt))
            .ForMember(dest => dest.Description, opt => opt.MapFrom(src => src.Description))
            .ForMember(dest => dest.PayType, opt => opt.MapFrom(src => "O")) // Default to single-stage
            .ForMember(dest => dest.Data, opt => opt.MapFrom(src => src.Metadata));

        // Transaction -> CheckTransactionDto
        CreateMap<Transaction, CheckTransactionDto>()
            .ForMember(dest => dest.TransactionId, opt => opt.MapFrom(src => src.TransactionId))
            .ForMember(dest => dest.Type, opt => opt.MapFrom(src => src.Type.ToString()))
            .ForMember(dest => dest.Status, opt => opt.MapFrom(src => src.Status.ToString()))
            .ForMember(dest => dest.Amount, opt => opt.MapFrom(src => src.Amount))
            .ForMember(dest => dest.Timestamp, opt => opt.MapFrom(src => src.CreatedAt))
            .ForMember(dest => dest.ResponseCode, opt => opt.MapFrom(src => src.ResponseCode))
            .ForMember(dest => dest.ResponseMessage, opt => opt.MapFrom(src => src.ResponseMessage))
            .ForMember(dest => dest.AuthorizationCode, opt => opt.MapFrom(src => src.AuthorizationCode))
            .ForMember(dest => dest.Rrn, opt => opt.Ignore()); // Would need to be added to Transaction entity

        // Customer -> CheckCustomerInfoDto
        CreateMap<Customer, CheckCustomerInfoDto>()
            .ForMember(dest => dest.CustomerKey, opt => opt.MapFrom(src => src.CustomerId.ToString()))
            .ForMember(dest => dest.Email, opt => opt.MapFrom(src => src.Email))
            .ForMember(dest => dest.Phone, opt => opt.MapFrom(src => src.Phone))
            .ForMember(dest => dest.IpAddress, opt => opt.Ignore()); // Would need to be stored
    }

    private void ConfigureCommonMappings()
    {
        // Error mappings
        CreateMap<List<string>, List<ErrorDetailDto>>()
            .ConvertUsing(src => src.Select(error => new ErrorDetailDto
            {
                Message = error,
                Code = "VALIDATION_ERROR"
            }).ToList());

        // Dictionary<string, string> mappings for metadata
        CreateMap<Dictionary<string, string>, Dictionary<string, object>>()
            .ConvertUsing(src => src.ToDictionary(kvp => kvp.Key, kvp => (object)kvp.Value));

        CreateMap<Dictionary<string, object>, Dictionary<string, string>>()
            .ConvertUsing<DataDictionaryConverter>();
    }

    // Helper method for status descriptions
    private static string GetStatusDescription(PaymentStatus status)
    {
        return status switch
        {
            PaymentStatus.INIT => "Payment initialized",
            PaymentStatus.NEW => "Payment created",
            PaymentStatus.FORM_SHOWED => "Payment form displayed",
            PaymentStatus.AUTHORIZING => "Authorization in progress",
            PaymentStatus.AUTHORIZED => "Payment authorized",
            PaymentStatus.AUTH_FAIL => "Authorization failed",
            PaymentStatus.CONFIRMING => "Confirmation in progress",
            PaymentStatus.CONFIRMED => "Payment confirmed",
            PaymentStatus.CANCELLING => "Cancellation in progress",
            PaymentStatus.CANCELLED => "Payment cancelled",
            PaymentStatus.REVERSING => "Reversal in progress",
            PaymentStatus.REVERSED => "Payment reversed",
            PaymentStatus.REFUNDING => "Refund in progress",
            PaymentStatus.REFUNDED => "Payment refunded",
            PaymentStatus.PARTIAL_REFUNDED => "Payment partially refunded",
            PaymentStatus.REJECTED => "Payment rejected",
            PaymentStatus.EXPIRED => "Payment expired",
            PaymentStatus.DEADLINE_EXPIRED => "Payment deadline expired",
            _ => "Unknown status"
        };
    }
}

/// <summary>
/// AutoMapper profile for validation and error handling
/// </summary>
public class ValidationMappingProfile : Profile
{
    public ValidationMappingProfile()
    {
        // Map validation errors to ErrorDetailDto
        CreateMap<FluentValidation.Results.ValidationFailure, ErrorDetailDto>()
            .ForMember(dest => dest.Field, opt => opt.MapFrom(src => src.PropertyName))
            .ForMember(dest => dest.Code, opt => opt.MapFrom(src => src.ErrorCode))
            .ForMember(dest => dest.Message, opt => opt.MapFrom(src => src.ErrorMessage))
            .ForMember(dest => dest.Context, opt => opt.MapFrom<ValidationErrorContextConverter>());

        // Map validation result to response
        CreateMap<FluentValidation.Results.ValidationResult, BaseResponseDto>()
            .ForMember(dest => dest.Success, opt => opt.MapFrom(src => src.IsValid))
            .ForMember(dest => dest.ErrorCode, opt => opt.MapFrom(src => src.IsValid ? null : "VALIDATION_ERROR"))
            .ForMember(dest => dest.Message, opt => opt.MapFrom(src => src.IsValid ? "Validation successful" : "Validation failed"))
            .ForMember(dest => dest.Details, opt => opt.MapFrom(src => src.Errors))
            .ForMember(dest => dest.Timestamp, opt => opt.MapFrom(src => DateTime.UtcNow))
            .ForMember(dest => dest.Version, opt => opt.MapFrom(src => "1.0"));
    }
}

/// <summary>
/// Converter for OrderItemDto to Dictionary<string, object>
/// </summary>
public class OrderItemDictionaryConverter : ITypeConverter<OrderItemDto, Dictionary<string, object>>
{
    public Dictionary<string, object> Convert(OrderItemDto source, Dictionary<string, object> destination, ResolutionContext context)
    {
        return new Dictionary<string, object>
        {
            ["name"] = source.Name,
            ["quantity"] = source.Quantity,
            ["price"] = source.Price,
            ["amount"] = source.Amount,
            ["tax"] = source.Tax ?? "",
            ["category"] = source.Category ?? ""
        };
    }
}

/// <summary>
/// Converter for Dictionary<string, object> to Dictionary<string, string>
/// </summary>
public class DataDictionaryConverter : ITypeConverter<Dictionary<string, object>, Dictionary<string, string>>
{
    public Dictionary<string, string> Convert(Dictionary<string, object> source, Dictionary<string, string> destination, ResolutionContext context)
    {
        return source.ToDictionary(kvp => kvp.Key, kvp => kvp.Value != null ? kvp.Value.ToString() : "");
    }
}

/// <summary>
/// Converter for ValidationFailure Context to Dictionary<string, object>
/// </summary>
public class ValidationErrorContextConverter : IValueConverter<object, Dictionary<string, object>?>
{
    public Dictionary<string, object>? Convert(object sourceMember, ResolutionContext context)
    {
        if (sourceMember != null)
        {
            var dict = new Dictionary<string, object>();
            dict["state"] = sourceMember;
            return dict;
        }
        return null;
    }
}