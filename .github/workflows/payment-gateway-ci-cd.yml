name: PaymentGateway CI/CD

permissions:
  contents: read
  packages: write
  
on:
  push:
    branches: [ main, master ]
    paths:
      - 'PaymentGateway/**'
      - 'PaymentGateway.API/**'
      - 'PaymentGateway.Core/**' 
      - 'PaymentGateway.Infrastructure/**'
      - 'PaymentGateway.Tests/**'
      - 'PaymentGateway.sln'
      - 'Directory.Packages.props'
      - 'Dockerfile'
      - '.github/workflows/payment-gateway-ci-cd.yml'
  
  pull_request:
    branches: [ main, master ]
    paths:
      - 'PaymentGateway/**'
      - 'PaymentGateway.API/**'
      - 'PaymentGateway.Core/**'
      - 'PaymentGateway.Infrastructure/**'
      - 'PaymentGateway.Tests/**'
      - 'PaymentGateway.sln'
      - 'Directory.Packages.props'
      - 'Dockerfile'
      - '.github/workflows/payment-gateway-ci-cd.yml'
  
  workflow_dispatch:
    inputs:
      skip_tests:
        description: 'Skip tests (for emergency deployments)'
        required: false
        default: 'false'
        type: boolean
      environment:
        description: 'Target environment'
        required: false
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: hackload-paymentgateway
  DOTNET_VERSION: '9.0.x'
  # Docker build parameters from docker-build.sh
  DOCKER_REGISTRY: ghcr.io
  DOCKER_NAMESPACE: hackload-kz
  DOCKER_IMAGE_NAME: paymentgateway

jobs:
  # test:
  #   name: Test in Container
  #   runs-on: self-hosted
  #   if: github.event.inputs.skip_tests != 'true'
    
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4
      
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3
      
  #   - name: Build test image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: ./Dockerfile
  #       target: test
  #       tags: paymentgateway-test:latest
  #       load: true
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max
        
  #   - name: Run tests in container
  #     run: |
  #       docker run --rm \
  #         -v /tmp/test-results:/testresults \
  #         paymentgateway-test:latest
          
  #   - name: Extract test results
  #     if: always()
  #     run: |
  #       # Copy test results from container volume
  #       mkdir -p test-results
  #       if [ -d /tmp/test-results ]; then
  #         cp -r /tmp/test-results/* test-results/ || true
  #       fi
        
  #   - name: Publish test results
  #     uses: dorny/test-reporter@v1
  #     if: always()
  #     with:
  #       name: PaymentGateway Tests
  #       path: 'test-results/*.trx'
  #       reporter: dotnet-trx
  #       fail-on-error: true
        
  #   - name: Upload test results
  #     if: always()
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: test-results
  #       path: test-results/
  #       retention-days: 30

  build-and-push:
    name: Build and Push Container
    runs-on: self-hosted
    # Remove test dependency since test job is commented out
    # if: always() && (needs.test.result == 'success' || github.event.inputs.skip_tests == 'true')
    
    outputs:
      image_tag: ${{ steps.meta.outputs.tags }}
      image_digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GHCR_TOKEN || secrets.GITHUB_TOKEN }}
        
    - name: Get Git information
      id: git
      run: |
        # Get commit SHA (short) - matching docker-build.sh
        COMMIT_SHA=$(git rev-parse --short HEAD)
        BRANCH=$(git rev-parse --abbrev-ref HEAD)
        
        # Check if working directory is clean
        if ! git diff-index --quiet HEAD --; then
          DIRTY="-dirty"
        else
          DIRTY=""
        fi
        
        echo "commit_sha=${COMMIT_SHA}${DIRTY}" >> $GITHUB_OUTPUT
        echo "branch=${BRANCH}" >> $GITHUB_OUTPUT
        echo "is_dirty=${DIRTY:+true}" >> $GITHUB_OUTPUT
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        # Use consistent naming from docker-build.sh: REGISTRY/NAMESPACE/IMAGE_NAME
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_NAMESPACE }}/${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          # Match docker-build.sh tagging strategy
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.git.outputs.commit_sha }}
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=${{ github.event.inputs.environment }},enable=${{ github.event_name == 'workflow_dispatch' }}
        labels: |
          org.opencontainers.image.title=HackLoad Payment Gateway
          org.opencontainers.image.description=Payment Gateway API for HackLoad 2025
          org.opencontainers.image.vendor=HackLoad Team
          org.opencontainers.image.licenses=MIT
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          # Custom labels matching docker-build.sh
          hackload.commit.sha=${{ steps.git.outputs.commit_sha }}
          hackload.commit.branch=${{ steps.git.outputs.branch }}
          hackload.build.dirty=${{ steps.git.outputs.is_dirty }}
          
    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        target: runtime
        push: true   # Push to Docker Hub
        load: false  # Don't need local copy when pushing
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64  # Build only for x64 platform
        build-args: |
          BUILDKIT_INLINE_CACHE=1
          ASPNETCORE_ENVIRONMENT=${{ github.event.inputs.environment || 'production' }}

  notify:
    name: Notify Completion
    runs-on: self-hosted
    needs: [build-and-push]
    if: always()
    
    steps:
    - name: Determine workflow status
      id: status
      run: |
        # Remove test and security-scan dependencies since jobs are commented out
        if [[ "${{ needs.build-and-push.result }}" == "success" ]]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=✅ PaymentGateway CI/CD completed successfully!" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=❌ PaymentGateway CI/CD failed. Check the logs for details." >> $GITHUB_OUTPUT
        fi
        
    - name: Create workflow summary
      run: |
        echo "# PaymentGateway CI/CD Workflow Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ steps.status.outputs.status == 'success' && '✅ SUCCESS' || '❌ FAILURE' }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Job Results" >> $GITHUB_STEP_SUMMARY        
        echo "- **Build & Push:** ${{ needs.build-and-push.result }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Container Image:** \`${{ needs.build-and-push.outputs.image_tag }}\`" >> $GITHUB_STEP_SUMMARY        