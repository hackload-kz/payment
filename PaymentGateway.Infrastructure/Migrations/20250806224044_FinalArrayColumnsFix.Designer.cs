// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PaymentGateway.Infrastructure.Data;

#nullable disable

namespace PaymentGateway.Infrastructure.Migrations
{
    [DbContext(typeof(PaymentGatewayDbContext))]
    [Migration("20250806224044_FinalArrayColumnsFix")]
    partial class FinalArrayColumnsFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("payment")
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PaymentGateway.Core.Entities.AuditEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Action")
                        .HasColumnType("integer")
                        .HasColumnName("action");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("archived_at");

                    b.Property<int>("Category")
                        .HasColumnType("integer")
                        .HasColumnName("category");

                    b.Property<string>("CorrelationId")
                        .HasColumnType("text")
                        .HasColumnName("correlation_id");

                    b.Property<string>("Details")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("details");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntitySnapshotAfter")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("entity_snapshot_after");

                    b.Property<string>("EntitySnapshotBefore")
                        .HasColumnType("text")
                        .HasColumnName("entity_snapshot_before");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_type");

                    b.Property<string>("IntegrityHash")
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)")
                        .HasColumnName("integrity_hash");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("boolean")
                        .HasColumnName("is_archived");

                    b.Property<bool>("IsSensitive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sensitive");

                    b.Property<string>("Metadata")
                        .HasColumnType("text")
                        .HasColumnName("metadata");

                    b.Property<string>("RequestId")
                        .HasColumnType("text")
                        .HasColumnName("request_id");

                    b.Property<decimal?>("RiskScore")
                        .HasColumnType("numeric")
                        .HasColumnName("risk_score");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<int>("Severity")
                        .HasColumnType("integer")
                        .HasColumnName("severity");

                    b.Property<string>("TeamSlug")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("team_slug");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("p_k_audit_entries");

                    b.ToTable("audit_entries", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Changes")
                        .HasColumnType("jsonb")
                        .HasColumnName("changes");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("EntityId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("entity_id");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("entity_name");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("new_values");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb")
                        .HasColumnName("old_values");

                    b.Property<string>("Operation")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("operation");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.Property<string>("UserId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("user_id");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("p_k_audit_logs");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_audit_logs_created_at");

                    b.HasIndex("EntityId")
                        .HasDatabaseName("ix_audit_logs_entity_id");

                    b.HasIndex("EntityName")
                        .HasDatabaseName("ix_audit_logs_entity_name");

                    b.HasIndex("Operation")
                        .HasDatabaseName("ix_audit_logs_operation");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_audit_logs_user_id");

                    b.HasIndex("EntityName", "EntityId")
                        .HasDatabaseName("ix_audit_logs_entity_name_id");

                    b.HasIndex("EntityName", "Operation", "CreatedAt")
                        .HasDatabaseName("ix_audit_logs_entity_operation_created");

                    b.ToTable("audit_logs", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("address");

                    b.Property<string>("BlacklistReason")
                        .HasColumnType("text")
                        .HasColumnName("blacklist_reason");

                    b.Property<DateTime?>("BlacklistedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("blacklisted_at");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_birth");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_blacklisted");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsKycVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_kyc_verified");

                    b.Property<DateTime?>("KycDocumentExpiryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("kyc_document_expiry_date");

                    b.Property<string>("KycDocumentNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kyc_document_number");

                    b.Property<string>("KycDocumentType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("kyc_document_type");

                    b.Property<DateTime?>("KycVerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("kyc_verified_at");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<DateTime?>("LastPaymentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_payment_at");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("metadata");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phone");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("postal_code");

                    b.Property<string>("PreferredCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("preferred_currency");

                    b.Property<string>("PreferredLanguage")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("preferred_language");

                    b.Property<string>("RiskLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("risk_level");

                    b.Property<int>("RiskScore")
                        .HasColumnType("integer")
                        .HasColumnName("risk_score");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<decimal>("TotalPaymentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_payment_amount");

                    b.Property<int>("TotalPaymentCount")
                        .HasColumnType("integer")
                        .HasColumnName("total_payment_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.HasKey("Id")
                        .HasName("p_k_customers");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_customers_team_id");

                    b.ToTable("customers", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasColumnName("amount");

                    b.Property<int>("AuthorizationAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("authorization_attempts");

                    b.Property<DateTime?>("AuthorizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("authorized_at");

                    b.Property<DateTime?>("AuthorizingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("authorizing_started_at");

                    b.Property<string>("BankName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_name");

                    b.Property<string>("BankOrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_order_id");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelled_at");

                    b.Property<DateTime?>("CancellingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("cancelling_started_at");

                    b.Property<string>("CardMask")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("card_mask");

                    b.Property<string>("CardType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_type");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirmed_at");

                    b.Property<DateTime?>("ConfirmingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("confirming_started_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("RUB")
                        .HasColumnName("currency");

                    b.Property<string>("CustomerEmail")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("customer_email");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<string>("CustomerIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("customer_ip_address");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("error_code");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("error_message");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expired_at");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("FailUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("fail_url");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("failure_reason");

                    b.Property<DateTime?>("FinishAuthorizeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finish_authorize_at");

                    b.Property<DateTime?>("FormShowedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("form_showed_at");

                    b.Property<DateTime?>("InitializedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("initialized_at");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<int>("MaxAllowedAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("max_allowed_attempts");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("OneChooseVisionAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("one_choose_vision_at");

                    b.Property<string>("OrderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("order_id");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_id");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("integer")
                        .HasColumnName("payment_method");

                    b.Property<string>("PaymentURL")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("payment_url");

                    b.Property<string>("Receipt")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("receipt");

                    b.Property<int>("RefundCount")
                        .HasColumnType("integer")
                        .HasColumnName("refund_count");

                    b.Property<decimal>("RefundedAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("refunded_amount");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refunded_at");

                    b.Property<DateTime?>("RefundingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refunding_started_at");

                    b.Property<DateTime?>("RejectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rejected_at");

                    b.Property<DateTime?>("ReversedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reversed_at");

                    b.Property<DateTime?>("ReversingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reversing_started_at");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("session_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("SuccessUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("success_url");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("TeamSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("team_slug");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("p_k_payments");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_payments_created_at");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("i_x_payments_customer_id");

                    b.HasIndex("OrderId")
                        .HasDatabaseName("ix_payments_order_id");

                    b.HasIndex("PaymentId")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_payment_id");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_payments_status");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_payments_team_id");

                    b.HasIndex("TeamSlug")
                        .HasDatabaseName("ix_payments_team_slug");

                    b.HasIndex("TeamSlug", "OrderId")
                        .IsUnique()
                        .HasDatabaseName("ix_payments_team_slug_order_id");

                    b.ToTable("payments", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.PaymentMethodInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("BankAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_account_number");

                    b.Property<string>("BankCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_code");

                    b.Property<string>("BankName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("bank_name");

                    b.Property<string>("CardBin")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("card_bin");

                    b.Property<string>("CardBrand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_brand");

                    b.Property<string>("CardCountry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_country");

                    b.Property<int?>("CardExpiryMonth")
                        .HasColumnType("integer")
                        .HasColumnName("card_expiry_month");

                    b.Property<int?>("CardExpiryYear")
                        .HasColumnType("integer")
                        .HasColumnName("card_expiry_year");

                    b.Property<string>("CardHolderName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_holder_name");

                    b.Property<string>("CardLast4")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)")
                        .HasColumnName("card_last4");

                    b.Property<string>("CardMask")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_mask");

                    b.Property<string>("CardType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uuid")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<int>("FailedTransactions")
                        .HasColumnType("integer")
                        .HasColumnName("failed_transactions");

                    b.Property<DateTime?>("FlaggedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("flagged_at");

                    b.Property<string>("FraudReason")
                        .HasColumnType("text")
                        .HasColumnName("fraud_reason");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<bool>("IsFraudulent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_fraudulent");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("is_verified");

                    b.Property<string>("IssuingBank")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("issuing_bank");

                    b.Property<DateTime?>("LastUsedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_used_at");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("metadata");

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("payment_method_id");

                    b.Property<bool>("RequiresVerification")
                        .HasColumnType("boolean")
                        .HasColumnName("requires_verification");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("SbpBankCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("sbp_bank_code");

                    b.Property<string>("SbpPhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("sbp_phone_number");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SuccessfulTransactions")
                        .HasColumnType("integer")
                        .HasColumnName("successful_transactions");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid")
                        .HasColumnName("team_id");

                    b.Property<string>("Token")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("token");

                    b.Property<DateTime?>("TokenExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("token_expires_at");

                    b.Property<string>("TokenProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("token_provider");

                    b.Property<decimal>("TotalAmountProcessed")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount_processed");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<int>("UsageCount")
                        .HasColumnType("integer")
                        .HasColumnName("usage_count");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("verified_at");

                    b.Property<string>("WalletEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("wallet_email");

                    b.Property<string>("WalletId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("wallet_id");

                    b.Property<string>("WalletProvider")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("wallet_provider");

                    b.HasKey("Id")
                        .HasName("p_k_payment_methods");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("i_x_payment_methods_customer_id");

                    b.HasIndex("TeamId")
                        .HasDatabaseName("i_x_payment_methods_team_id");

                    b.ToTable("payment_methods", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Address")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("address");

                    b.Property<string>("ApiVersion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("api_version");

                    b.Property<Dictionary<string, string>>("BusinessInfo")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("business_info");

                    b.Property<bool>("CanProcessRefunds")
                        .HasColumnType("boolean")
                        .HasColumnName("can_process_refunds");

                    b.Property<string>("CancelUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)")
                        .HasColumnName("cancel_url");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(254)
                        .HasColumnType("character varying(254)")
                        .HasColumnName("contact_email");

                    b.Property<string>("ContactPhone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("contact_phone");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("created_by");

                    b.Property<decimal?>("DailyPaymentLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("daily_payment_limit");

                    b.Property<int?>("DailyTransactionLimit")
                        .HasColumnType("integer")
                        .HasColumnName("daily_transaction_limit");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<bool>("Enable3DSecure")
                        .HasColumnType("boolean")
                        .HasColumnName("enable3_d_secure");

                    b.Property<bool>("EnableFraudDetection")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_fraud_detection");

                    b.Property<bool>("EnablePartialRefunds")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_partial_refunds");

                    b.Property<bool>("EnableRecurringPayments")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_recurring_payments");

                    b.Property<bool>("EnableRefunds")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_refunds");

                    b.Property<bool>("EnableReversals")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_reversals");

                    b.Property<bool>("EnableTokenization")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_tokenization");

                    b.Property<bool>("EnableWebhooks")
                        .HasColumnType("boolean")
                        .HasColumnName("enable_webhooks");

                    b.Property<string>("FailUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("fail_url");

                    b.Property<int>("FailedAuthenticationAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("failed_authentication_attempts");

                    b.Property<string>("FeeCurrency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("fee_currency");

                    b.Property<decimal>("FixedProcessingFee")
                        .HasColumnType("numeric")
                        .HasColumnName("fixed_processing_fee");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("is_active");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("LastAuthenticationIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("last_authentication_ip_address");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_password_change_at");

                    b.Property<DateTime?>("LastSuccessfulAuthenticationAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_successful_authentication_at");

                    b.Property<string>("LegalName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("legal_name");

                    b.Property<DateTime?>("LockedUntil")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("locked_until");

                    b.Property<int>("MaxFraudScore")
                        .HasColumnType("integer")
                        .HasColumnName("max_fraud_score");

                    b.Property<decimal?>("MaxPaymentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("max_payment_amount");

                    b.Property<Dictionary<string, string>>("Metadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("metadata");

                    b.Property<decimal?>("MinPaymentAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("min_payment_amount");

                    b.Property<decimal?>("MonthlyPaymentLimit")
                        .HasColumnType("numeric")
                        .HasColumnName("monthly_payment_limit");

                    b.Property<string>("NotificationUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("notification_url");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("password_hash");

                    b.Property<decimal>("ProcessingFeePercentage")
                        .HasColumnType("numeric")
                        .HasColumnName("processing_fee_percentage");

                    b.Property<bool>("RequireManualReviewForHighRisk")
                        .HasColumnType("boolean")
                        .HasColumnName("require_manual_review_for_high_risk");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<string>("SecretKey")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("secret_key");

                    b.Property<string>("SettlementAccountNumber")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("settlement_account_number");

                    b.Property<string>("SettlementBankCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("settlement_bank_code");

                    b.Property<int>("SettlementDelayDays")
                        .HasColumnType("integer")
                        .HasColumnName("settlement_delay_days");

                    b.Property<string>("SuccessUrl")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("success_url");

                    b.Property<string[]>("SupportedCurrencies")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_currencies");

                    b.Property<string[]>("SupportedPaymentMethods")
                        .IsRequired()
                        .HasColumnType("text[]")
                        .HasColumnName("supported_payment_methods");

                    b.Property<string>("TaxId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tax_id");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("team_name");

                    b.Property<string>("TeamSlug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("team_slug");

                    b.Property<string>("TimeZone")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("time_zone");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("updated_by");

                    b.Property<int>("WebhookRetryAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("webhook_retry_attempts");

                    b.Property<string>("WebhookSecret")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("webhook_secret");

                    b.Property<int>("WebhookTimeoutSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("webhook_timeout_seconds");

                    b.HasKey("Id")
                        .HasName("p_k_teams");

                    b.HasAlternateKey("TeamSlug")
                        .HasName("a_k_teams_team_slug");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("ix_teams_is_active");

                    b.HasIndex("TeamName")
                        .HasDatabaseName("ix_teams_team_name");

                    b.HasIndex("TeamSlug")
                        .IsUnique()
                        .HasDatabaseName("ix_teams_team_slug");

                    b.ToTable("teams", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("AcquirerFee")
                        .HasColumnType("numeric")
                        .HasColumnName("acquirer_fee");

                    b.Property<Dictionary<string, string>>("AcquirerResponseData")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("acquirer_response_data");

                    b.Property<string>("AcquirerTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("acquirer_transaction_id");

                    b.Property<Dictionary<string, string>>("AdditionalData")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("additional_data");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric")
                        .HasColumnName("amount");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer")
                        .HasColumnName("attempt_number");

                    b.Property<string>("AuthorizationCode")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("authorization_code");

                    b.Property<DateTime?>("AuthorizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("authorized_at");

                    b.Property<string>("BankOrderId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_order_id");

                    b.Property<Dictionary<string, string>>("BankResponseData")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("bank_response_data");

                    b.Property<string>("BankTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("bank_transaction_id");

                    b.Property<DateTime?>("CapturedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("captured_at");

                    b.Property<string>("CardBin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_bin");

                    b.Property<string>("CardBrand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_brand");

                    b.Property<string>("CardCountry")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_country");

                    b.Property<string>("CardMask")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("card_mask");

                    b.Property<string>("CardType")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("card_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasColumnName("created_by");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("CustomerIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("customer_ip_address");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasColumnName("deleted_by");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("numeric")
                        .HasColumnName("exchange_rate");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("ExternalTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("external_transaction_id");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("failed_at");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("failure_reason");

                    b.Property<string>("FeeCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("fee_currency");

                    b.Property<int>("FraudScore")
                        .HasColumnType("integer")
                        .HasColumnName("fraud_score");

                    b.Property<bool>("Is3DSecureUsed")
                        .HasColumnType("boolean")
                        .HasColumnName("is3_d_secure_used");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_deleted");

                    b.Property<string>("IssuingBank")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("issuing_bank");

                    b.Property<int>("MaxRetryAttempts")
                        .HasColumnType("integer")
                        .HasColumnName("max_retry_attempts");

                    b.Property<decimal>("NetworkFee")
                        .HasColumnType("numeric")
                        .HasColumnName("network_fee");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("next_retry_at");

                    b.Property<Guid?>("ParentTransactionId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_transaction_id");

                    b.Property<string>("PaymentExternalId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("payment_external_id");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_id");

                    b.Property<DateTime?>("ProcessingCompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processing_completed_at");

                    b.Property<decimal>("ProcessingFee")
                        .HasColumnType("numeric")
                        .HasColumnName("processing_fee");

                    b.Property<Dictionary<string, string>>("ProcessingMetadata")
                        .IsRequired()
                        .HasColumnType("hstore")
                        .HasColumnName("processing_metadata");

                    b.Property<DateTime?>("ProcessingStartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processing_started_at");

                    b.Property<string>("ProcessorTransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("processor_transaction_id");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refunded_at");

                    b.Property<string>("ResponseCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("response_code");

                    b.Property<string>("ResponseMessage")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("response_message");

                    b.Property<DateTime?>("ReversedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("reversed_at");

                    b.Property<string>("RiskCategory")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("risk_category");

                    b.Property<byte[]>("RowVersion")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<decimal>("SettlementAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("settlement_amount");

                    b.Property<string>("SettlementCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("settlement_currency");

                    b.Property<DateTime?>("SettlementDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("settlement_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("ThreeDSecureStatus")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("three_d_secure_status");

                    b.Property<string>("ThreeDSecureVersion")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("three_d_secure_version");

                    b.Property<decimal>("TotalFees")
                        .HasColumnType("numeric")
                        .HasColumnName("total_fees");

                    b.Property<string>("TransactionId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("transaction_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("user_agent");

                    b.HasKey("Id")
                        .HasName("p_k_transactions");

                    b.HasIndex("ParentTransactionId")
                        .HasDatabaseName("i_x_transactions_parent_transaction_id");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("i_x_transactions_payment_id");

                    b.ToTable("transactions", "payment");
                });

            modelBuilder.Entity("PaymentPaymentMethodInfo", b =>
                {
                    b.Property<Guid>("PaymentMethodsId")
                        .HasColumnType("uuid")
                        .HasColumnName("payment_methods_id");

                    b.Property<Guid>("PaymentsId")
                        .HasColumnType("uuid")
                        .HasColumnName("payments_id");

                    b.HasKey("PaymentMethodsId", "PaymentsId")
                        .HasName("p_k_payment_payment_method_info");

                    b.HasIndex("PaymentsId")
                        .HasDatabaseName("i_x_payment_payment_method_info_payments_id");

                    b.ToTable("payment_payment_method_info", "payment");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Customer", b =>
                {
                    b.HasOne("PaymentGateway.Core.Entities.Team", "Team")
                        .WithMany("Customers")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_customers_teams_team_id");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Payment", b =>
                {
                    b.HasOne("PaymentGateway.Core.Entities.Customer", "Customer")
                        .WithMany("Payments")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("f_k_payments_customers_customer_id");

                    b.HasOne("PaymentGateway.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_payments_teams_team_id");

                    b.HasOne("PaymentGateway.Core.Entities.Team", null)
                        .WithMany("Payments")
                        .HasForeignKey("TeamSlug")
                        .HasPrincipalKey("TeamSlug")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_payments_team_slug");

                    b.Navigation("Customer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.PaymentMethodInfo", b =>
                {
                    b.HasOne("PaymentGateway.Core.Entities.Customer", "Customer")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("f_k_payment_methods_customers_customer_id");

                    b.HasOne("PaymentGateway.Core.Entities.Team", "Team")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_payment_methods_teams_team_id");

                    b.Navigation("Customer");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Transaction", b =>
                {
                    b.HasOne("PaymentGateway.Core.Entities.Transaction", "ParentTransaction")
                        .WithMany("ChildTransactions")
                        .HasForeignKey("ParentTransactionId")
                        .HasConstraintName("f_k_transactions_transactions_parent_transaction_id");

                    b.HasOne("PaymentGateway.Core.Entities.Payment", "Payment")
                        .WithMany("Transactions")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_transactions_payments_payment_id");

                    b.Navigation("ParentTransaction");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("PaymentPaymentMethodInfo", b =>
                {
                    b.HasOne("PaymentGateway.Core.Entities.PaymentMethodInfo", null)
                        .WithMany()
                        .HasForeignKey("PaymentMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_payment_payment_method_info_payment_methods_payment_methods~");

                    b.HasOne("PaymentGateway.Core.Entities.Payment", null)
                        .WithMany()
                        .HasForeignKey("PaymentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("f_k_payment_payment_method_info_payments_payments_id");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Customer", b =>
                {
                    b.Navigation("PaymentMethods");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Payment", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Team", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("PaymentMethods");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("PaymentGateway.Core.Entities.Transaction", b =>
                {
                    b.Navigation("ChildTransactions");
                });
#pragma warning restore 612, 618
        }
    }
}
